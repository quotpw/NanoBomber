import sys

sys.path.append("../..")  # append Services to python path import

import asyncio
import logging
import traceback
import os
import re
import threading
import time
import uuid

import sentry_sdk
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types import ContentTypes
from aiogram_broadcaster import MessageBroadcaster

from func import *
import Services
import Services.proxoid

import config_file as cfg
from _sql import Sql

os.chdir(os.path.dirname(os.path.realpath(__file__)))

if os.name == 'nt':  # If os == –®indows
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())  # fix for "Asyncio Event Loop is Closed"

sentry_sdk.init("https://5ee299beebac4280a92fc9a1b591a69b@o453662.ingest.sentry.io/5944929", traces_sample_rate=1.0)
logging.basicConfig(level=logging.WARNING)  # WARNING

proxyApi = Services.proxoid.Proxoid('25e6c5e10c61b89e94607807fc9a6fb4')
sql = Sql(**cfg.DB_CONF)
bot = Bot(token=cfg.TG_TOKEN, parse_mode=types.ParseMode.HTML)
bot_info = None
dp = Dispatcher(bot, storage=MemoryStorage())


def spam(message: types.Message, phone: Services.phone.Phone, minutes: int):
    _loop = asyncio.new_event_loop()
    asyncio.set_event_loop(_loop)

    _loop.run_until_complete(async_spam(message, phone, minutes))
    _loop.close()


async def async_spam(message: types.Message, phone: Services.phone.Phone, minutes: int):
    _bot = Bot(token=cfg.TG_TOKEN, parse_mode=types.ParseMode.HTML)
    Bot.set_current(_bot)

    alive_until = time.time() + (minutes * 60)
    thread_id = str(uuid.uuid4())
    await sql.create_thread(thread_id, message.chat.id, alive_until)

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å‚õîÔ∏è", callback_data=f"stop_thread::{thread_id}"))
    spam_info_msg = await message.reply(
        "<b>–°–ø–∞–º —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
        f"<b>–ñ–µ—Ä—Ç–≤–∞</b>:  <code>{phone.number}</code>\n"
        f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç —Å–ø–∞–º–∞</b>:  <code>{minutes}</code>\n"
        f"<b>–ó–∞–∫–æ–Ω—á–∏—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ –≤</b>   <i>~</i> "
        f"<code>{stamp_to_date(alive_until, return_time=True)}</code><i>msk</i>",
        reply_markup=markup
    )

    requester = Services.Services(phone)
    await requester.async_load_from_sqlite3(cfg.DB_CONF, 'services')
    while (await sql.thread_alive(thread_id)) and time.time() < alive_until:
        proxy = None
        while proxy is None:
            temp_proxy = proxyApi.rotated_proxy
            con = asyncio.open_connection(temp_proxy.ip, int(temp_proxy.port))
            try:
                r, w = await asyncio.wait_for(con, timeout=0.5)
                w.close()
                proxy = temp_proxy
            except:
                pass
        try:
            await requester.async_run(proxy=proxy)
        except:
            logging.error(traceback.format_exc())

    await sql.delete_thread(thread_id, message.chat.id)  # delete thread

    text = "<b>–°–ø–∞–º –∑–∞–∫–æ–Ω—á–µ–Ω üòé.</b>\n\n" \
           f"<b>–ñ–µ—Ä—Ç–≤–∞</b>:  <code>{phone.number}</code>\n" \
           f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç —Å–ø–∞–º–∞</b>:  <code>{minutes}</code>\n"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –µ—â–µ —Ä–∞–∑üîÉ", callback_data=f"re_spam::{phone.number}::{minutes}"))

    try:
        await spam_info_msg.edit_text(text, reply_markup=markup)
    except:
        try:
            await spam_info_msg.reply(text, reply_markup=markup)
        except:
            pass


async def start_spam(message, rank, number: str, minutes: str = None) -> list:
    if (await sql.count_threads(message.chat.id)) >= rank.count_threads:
        return [
            False,
            f"–í—ã —É–∂–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏ <code>{rank.count_threads}</code> –∏–∑ <code>{rank.count_threads}</code> –ø–æ—Ç–æ–∫–æ–≤.ü§∑‚Äç‚ôÇÔ∏è"
        ]

    if minutes is not None:
        if int(minutes) > rank.count_min:
            return [
                False,
                f"–í—ã —É–∫–∞–∑–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –º–∏–Ω—É—Ç.\n<i>–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ: </i><code>{rank.count_min}</code> –º–∏–Ω—É—Ç."
            ]

    phone = Services.phone.Phone(number)

    if not phone.valid:
        return [
            False,
            "–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
        ]

    if minutes is not None:
        thread = threading.Thread(target=spam, args=[message, phone, int(minutes)])
        thread.start()

        return [
            True,
            thread
        ]

    return [
        True,
        phone.number
    ]


async def select_minuts_message(message, rank, phone):
    markup = types.InlineKeyboardMarkup()

    if rank.id == 1:
        markup.add(
            types.InlineKeyboardButton("5 –º–∏–Ω—É—Ç", callback_data=f"re_spam::{phone}::5")
        )
    else:
        markup.add(
            types.InlineKeyboardButton("5 –º–∏–Ω—É—Ç", callback_data=f"re_spam::{phone}::5"),
            types.InlineKeyboardButton("10 –º–∏–Ω—É—Ç", callback_data=f"re_spam::{phone}::10"),
            types.InlineKeyboardButton("15 –º–∏–Ω—É—Ç", callback_data=f"re_spam::{phone}::15")
        )

    if rank.id >= 2:
        markup.add(
            types.InlineKeyboardButton("–ü–æ–ª—á–∞—Å–∞", callback_data=f"re_spam::{phone}::30"),
            types.InlineKeyboardButton("–ß–∞—Å", callback_data=f"re_spam::{phone}::60")
        )
    if rank.id >= 3:
        markup.add(
            types.InlineKeyboardButton("1 –ß–∞—Å, 30–º–∏–Ω", callback_data=f"re_spam::{phone}::90"),
            types.InlineKeyboardButton("2 —á–∞—Å–∞", callback_data=f"re_spam::{phone}::120")
        )
    if rank.id >= 4:
        markup.add(
            types.InlineKeyboardButton("2 —á–∞—Å–∞, 30–º–∏–Ω", callback_data=f"re_spam::{phone}::150"),
            types.InlineKeyboardButton("3 —á–∞—Å–∞", callback_data=f"re_spam::{phone}::180")
        )
    if rank.id >= 5:
        markup.add(
            types.InlineKeyboardButton("4 –ß–∞—Å–∞", callback_data=f"re_spam::{phone}::240"),
            types.InlineKeyboardButton("4 –ß–∞—Å–∞, 30–º–∏–Ω", callback_data=f"re_spam::{phone}::270"),
            types.InlineKeyboardButton("5 —á–∞—Å–æ–≤", callback_data=f"re_spam::{phone}::300")
        )

    await message.answer(
        f"<i>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</i>: <code>{phone}</code>\n"
        f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª-–≤–æ –º–∏–Ω—É—Ç —Å–ø–∞–º–∞!</b>",
        reply_markup=markup
    )


@dp.message_handler(content_types=types.ContentType.CONTACT)
async def start_spam_handler_contact(message: types.Message):
    user = await sql.get_user(message.chat.id, message=message, bot=bot)
    rank = await sql.get_rank(user.rank_id)

    if not rank.access:
        return

    result = await start_spam(message, rank, message.contact.phone_number)
    if not result[0]:
        await message.answer(result[1])
    else:
        await select_minuts_message(message, rank, result[1])


@dp.message_handler(regexp="^[+]*\d{10,} \d{1,4}")
async def start_spam_handler(message: types.Message):
    user = await sql.get_user(message.chat.id, message=message, bot=bot)
    rank = await sql.get_rank(user.rank_id)

    if not rank.access:
        return

    bomb_info = re.findall("[+]*(\d{10,}) (\d{1,4})", message.text)

    if len(bomb_info) == 1:
        result = await start_spam(message, rank, bomb_info[0][0], bomb_info[0][1])
        if not result[0]:
            await message.answer(result[1])
    else:
        if (await sql.count_threads(message.chat.id)) >= rank.count_threads:
            await message.answer(
                "–í—ã —É–∂–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏ <code>{rank.count_threads}</code> –∏–∑ <code>{rank.count_threads}</code> –ø–æ—Ç–æ–∫–æ–≤.ü§∑‚Äç‚ôÇÔ∏è"
            )
        elif (await sql.count_threads(message.chat.id)) + len(bomb_info) > rank.count_threads:
            ne_hvataet = (rank.count_threads - ((await sql.count_threads(message.chat.id)) + len(bomb_info))) * -1
            await message.answer(
                f"–£–≤—ã, –Ω–æ –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç <code>{ne_hvataet}</code> –ø–æ—Ç–æ–∫–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –º–µ–Ω—å—à–µ –Ω–æ–º–µ—Ä–æ–≤!"
            )
        else:
            await message.answer("–ü—Ä–æ–∏–∑–≤–æ–∂—É –ø–æ–æ—á–µ—Ä–µ–¥–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤!")
            for number in bomb_info:
                result = await start_spam(message, rank, number[0], number[1])
                if not result[0]:
                    await message.answer(result[1])
                await asyncio.sleep(0.2)


def mailing_to_users(message: types.Message):
    _loop = asyncio.new_event_loop()
    asyncio.set_event_loop(_loop)

    _loop.run_until_complete(async_mailing_to_users(message))
    _loop.close()


async def async_mailing_to_users(message: types.Message):
    _bot = Bot(token=cfg.TG_TOKEN, parse_mode=types.ParseMode.HTML)
    Bot.set_current(_bot)

    users = await sql.get_users_chatid()

    await message.reply("–†–∞—Å—Å—ã–ª–∞—é..")

    broadcaster = MessageBroadcaster(users, message, bot=_bot)
    await broadcaster.run()

    # noinspection PyProtectedMember
    await message.reply(
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Å—ã–ª–∫–µ: \n\n"
        f"Successful: <code>{len(broadcaster._successful)}</code>\n"
        f"Failure: <code>{len(broadcaster._failure)}</code>"
    )


@dp.channel_post_handler(lambda msg: msg.chat.id == -1001591780786, content_types=ContentTypes.ANY)
async def mailing_handler(message: types.Message):
    threading.Thread(target=mailing_to_users, args=[message]).start()


async def supports(message: types.Message):
    supports_text = ""
    for admin in await sql.get_admins():
        if admin.chatid == 1546285582:
            continue
        username = (await bot.get_chat(admin.chatid)).username
        if username:
            supports_text += f"@{username}\n"
    await message.answer(f"–ù–∞—à–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è: \n{supports_text}")


@dp.message_handler(content_types=types.ContentType.TEXT)
async def text_handler(message: types.Message):
    user = await sql.get_user(message.chat.id, message=message, bot=bot)
    rank = await sql.get_rank(user.rank_id)

    if message.text.replace('+', '').replace(' ', '').replace('-', '').replace('(', '').replace(')', '').isdigit():
        result = await start_spam(message, rank, re.sub("[^0-9]", "", message.text))
        if not result[0]:
            await message.answer(result[1])
        else:
            await select_minuts_message(message, rank, result[1])
        return

    promo = re.findall("^/start promo(.+)", message.text)
    if promo:
        promo = await sql.get_promo(promo[0])
        if promo:
            await sql.delete_promo(promo[0].uuid)

            if promo[0].until and promo[0].until < time.time():
                await message.answer("–£–≤—ã, –Ω–æ –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å—Ç–µ–∫ :(")
                return

            temp_rank = await sql.get_rank(promo[0].rank_id, False)
            if temp_rank:
                rank = temp_rank[0]
                await sql.change_rank(message.chat.id, promo[0].rank_id, promo[0].until)
                await message.answer(f"<i>–ü–æ –ø—Ä–æ–º–æ–∫–æ–¥—É —Ç–≤–æ–π —Ä–∞–Ω–≥ –±—ã–ª —Å–º–µ–Ω–µ–Ω –Ω–∞</i> {rank.name}\n\n"
                                     f"<b>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ</b>: {subscribe_until(promo[0].until)}")
            else:
                await message.answer("–ò–∑–≤–∏–Ω–∏, –Ω–æ —Ç–∞–∫–æ–≥–æ —Ä–∞–Ω–≥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –≤—Å–µ –º–µ–Ω—è–µ—Ç—Å—è.")
                return
        else:
            await message.answer("–ò–∑–≤–∏–Ω–∏, –Ω–æ —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ–Ω —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
            return

    if user.until:  # if time expiration set
        if user.until < time.time():  # if expire
            await sql.change_rank(message.chat.id, cfg.DEFAULT_RANK, 0)  # set default rank
            await message.answer(f'–í–∞—à —Ç–∞—Ä–∏—Ñ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è {stamp_to_date(user.until)}')
            await text_handler(message)  # run handler again
            return  # exit

    if rank.can_buy:
        if message.text == '–¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ãüí≥':
            available_ranks = await sql.get_ranks_for_sale(user.rank_id)
            text = "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è –ø—Ä–∏–æ–±—Ä–∏—Ç–µ–Ω–∏—è:</b>\n\n\n" + \
                   ("\n\n".join([
                       f"[<code>{_rank.name}</code>] - "
                       f"<code>{_rank.count_threads}</code> <i>–ü–æ—Ç–æ–∫–æ–≤</i> - "
                       f"<code>{_rank.count_min}</code> <i>–ú–∏–Ω—É—Ç</i> ‚Äî "
                       f"<code>{_rank.price}</code><i>rub.</i>\n"
                       f"–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ - /buy_{_rank.id}"
                       for _rank in available_ranks])) + \
                   "\n\n\n–í—Å–µ —Ç–∞—Ä–∏—Ñ—ã <b>–ø—Ä–∏–æ–±—Ä–∏—Ç–∞—é—Ç—Å—è –Ω–∞ –≥–æ–¥</b>!\n" \
                   "–í–æ–∑—Ä–∞—Ç–∞ - –Ω–µ—Ç."
            await message.answer(text)
            return
        elif message.text == 'üõ†Supportüõ†':
            await supports(message)
            return
        buy_msg = re.findall("/buy_(\d*)", message.text)
        if buy_msg:
            selected_rank = await sql.get_rank(int(buy_msg[0]), False)
            if selected_rank:
                selected_rank = selected_rank[0]
                if selected_rank.for_sale:
                    comment = gen_coment("tg_nano", message.chat.id, selected_rank.id, selected_rank.price)
                    markup = types.InlineKeyboardMarkup()
                    markup.add(
                        types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", url=gen_url('79384302457', selected_rank.price, comment))
                    )
                    await message.answer(
                        f'–û–ü–õ–ê–¢–ê –ù–ê ü•ù–ö–ò–í–ò –ö–û–®–ï–õ–ï–öü•ù\n\n'
                        f'–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ <code>{selected_rank.price}</code><i>rub.</i>\n'
                        f'–ù–∞ –Ω–æ–º–µ—Ä: <code>+79384302457</code>\n'
                        f'–° –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–µ–º: <code>{comment}</code>\n\n'
                        f'–û—Ç–≥–æ–≤–æ—Ä–∫–∏ –ø–æ —Ç–∏–ø—É "<i>–Ø –Ω–µ—á–∞—è–Ω–Ω–æ –∏–∑–º–µ–Ω–∏–ª –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π</i>" - –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.\n'
                        f'–ñ–µ–ª–∞–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —Å –¥—Ä—É–≥–æ–≥–æ –±–∞–Ω–∫–∞? - –æ–ø–ª–∞—á–∏–≤–∞–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —á–µ–∫ –ª—é–±–æ–º—É –Ω–∞—à–µ–º—É –∞–¥–º–∏–Ω—É.',
                        reply_markup=markup
                    )
                    return
            await message.answer("–¢—ã –±–ª—è—Ç—å —Å–æ–≤—Å–µ–º –Ω–∞—Ö—É–π –∫–æ–Ω—á–µ–Ω–Ω—ã–π?\n"
                                 "–•—É–ª–∏ —Ç—ã —Ç—É—Ç –¥–µ–ª–∞–µ—à—å –ø–∏–¥–æ—Ä–∞—Å –µ–±–∞–Ω–Ω—ã–π? –ø–∞—à–µ–ª –Ω–∞—Ö—É–π))\n"
                                 "–ó–∞–µ–±–∞–ª–∏ –µ–±–∞–Ω–Ω—ã–µ –º–µ–ª–∫–∏–µ –ø–µ–Ω—Ç–µ—Å—Ç–µ—Ä—ã, —è –≤ —Ä–æ—Ç –µ–±–∞–ª –≤–∞—Å –Ω–∞—Ö—É–π")
            return

    if not rank.access:
        if rank.can_buy:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('–¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ãüí≥')
            markup.add("üõ†Supportüõ†")
            await message.answer(
                "üëã –ü—Ä–∏–≤–µ—Ç\n‚è© –ß—Ç–æ–± –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É –Ω–∏–∂–µ ‚è™",
                reply_markup=markup
            )
            return
    else:
        if message.text == "üí£BOMBüí£":
            await message.answer(
                "<b>‚ÑπÔ∏è–ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –∑–∞–ø—É—Å–∫–∞ —Å–ø–∞–º–∞:</b>\n"
                "\n"
                "\n"
                "<b>1)</b> –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∂–µ—Ä—Ç–≤—ã:\n"
                "    - –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                "        üìû <code>79000000228</code> - <i>–ø—Ä–æ—Å—Ç–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.</i>\n"
                "        üìû <code>+7 (970) 834-63-82</code> - <i>–≤—ã–µ–±–æ–Ω—Å–∫–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.</i>\n"
                "        üìû <code>+7(999)7349364</code> - <i>–µ—â–µ –æ–¥–∏–Ω –≤—ã–µ–±–æ–Ω—Å–∫–∏–π –Ω–æ–º–µ—Ä.</i>\n"
                "    - –î–∞–ª–µ–µ –ø—Ä–µ–¥–ª–æ–∂–∞—Ç –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª-–≤–æ –º–∏–Ω—É—Ç –¥–ª—è —Å–ø–∞–º–∞.\n"
                "\n"
                "<b>2)</b> –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ:\n"
                "    - –î–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
                "        ‚òéÔ∏è <code>–ö–æ–Ω—Ç–∞–∫—Ç</code> - <i>–Ω–∞–∂–∏–º–∞–µ—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É, –¥–∞–ª–µ–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã.</i>\n"
                "\n"
                "<b>3)</b> –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∏ –∫–æ–ª-–≤–æ –º–∏–Ω—É—Ç –¥–ª—è —Å–ø–∞–º–∞:\n"
                "    - –î–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
                "        üìû <code>79000012228 10</code> - <i>–∑–∞–ø—É—Å–∫ —Å–ø–∞–º–∞ –Ω–∞ 10–º–∏–Ω.</i>\n"
                "        üìû <code>380501334228 300</code> - <i>–∑–∞–ø—É—Å–∫ —Å–ø–∞–º–∞ –Ω–∞ 5—á.</i>\n"
                "\n"
                "4) –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–æ–ª-–≤–æ –º–∏–Ω—É—Ç –¥–ª—è —Å–ø–∞–º–∞:\n"
                "    - –î–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
                "                <code>79000012228 10</code>\n"
                "                <code>380501334228 300</code>\n"
                "                <code>79180012468 24</code>\n"
                "                <code>79743073735 124</code>\n"
                "    - –î–∞–ª–µ–µ –±–æ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ—á–∫—É –∏ –∑–∞–ø—É—Å—Ç–∏—Ç –ø–æ –ø–æ—Ç–æ–∫—É –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ.\n"
            )
        elif message.text == "üë§–ü—Ä–æ—Ñ–∏–ª—åüë§":
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø–æ—Ç–æ–∫–∏", callback_data="stop_threads"))
            await message.answer_photo(
                open("img/profile.png", 'rb'),
                caption="‚†Ä   <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n"
                        f"‚†Ä   <i>ID</i>: <code>{message.chat.id}</code>\n\n"
                        f"<b>== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–Ω–≥–µ ==</b>\n"
                        f"<i>–†–∞–Ω–≥</i>: <code>{rank.name}</code>\n"
                        f"<i>–ú–∞–∫—Å–∏–º—É–º –º–∏–Ω—É—Ç</i>: <code>{rank.count_min}</code>\n"
                        f"<i>–ü–æ—Ç–æ–∫–æ–≤</i>: <code>{await sql.count_threads(message.chat.id)}</code>/<code>"
                        f"{rank.count_threads}</code>\n"
                        f"<i>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ</i>: <code>{subscribe_until(user.until)}</code>\n\n"
                        f"<b>== –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ ==</b>\n"
                        f"<code>–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ </code><b>{cfg.REF_PROC}%</b><code> –æ—Ç –ø–æ–∫—É–ø–æ–∫ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.</code>\n"
                        f'<i>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞</i>: '
                        f'<a href="https://t.me/{bot_info.username}?start=ref{message.chat.id}">Link</a>\n'
                        f"<i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</i>: <code>{await sql.count_of_refers(message.chat.id)}</code>\n"
                        f"<i>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–µ–Ω–µ–≥</i>: <code>{user.balance}</code>rub\n\n"
                        f"<b>-</b> <i>‚Äú–î–ª—è –≤—ã–≤–æ–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É‚Äù</i>",
                reply_markup=markup
            )
        elif rank.admin and message.text == 'ADM':
            markup = types.InlineKeyboardMarkup(resize_keyboard=True)
            markup.add(types.InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"))
            markup.add(
                types.InlineKeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", callback_data="user"),
                types.InlineKeyboardButton("–ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="promo"),
                types.InlineKeyboardButton("–¢–∞—Ä–∏—Ñ—ã", callback_data="tariff")
            )
            markup.add(types.InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø–æ—Ç–æ–∫–∏", callback_data="stop_all_threads"))
            await message.answer_photo(
                open("img/adminpanel.png", 'rb'),
                reply_markup=markup
            )
        elif message.text == 'üõ†Supportüõ†':
            await supports(message)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("üí£BOMBüí£")
            if rank.can_buy:
                markup.add("–¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ãüí≥")
            markup.add("üë§–ü—Ä–æ—Ñ–∏–ª—åüë§")
            if rank.admin:
                markup.add("ADM")
            else:
                markup.add("üõ†Supportüõ†")

            await message.answer(
                '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é‚úã\n–ú–µ–Ω—é –Ω–∏–∂–µ.',
                reply_markup=markup
            )


@dp.message_handler(state='user_profile')
async def test(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        menu_message_id = data.get('message_id')
        need_edit = data.get("need_edit")

    user = await sql.get_user(message.text, return_user=False)
    await bot.delete_message(message.chat.id, message.message_id)

    if user:
        await state.finish()
        await show_user_profile(message.chat.id, menu_message_id, user[0])
    else:
        if need_edit:
            await state.update_data(need_edit=False)

            markup = types.InlineKeyboardMarkup(resize_keyboard=True)
            markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©Ô∏è", callback_data="admin"))
            await bot.edit_message_caption(
                message.chat.id,
                menu_message_id,
                caption="–£–≤—ã, —è –Ω–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –µ—â–µ —Ä–∞–∑!",
                reply_markup=markup
            )


async def show_promo(chat_id, message_id, update_photo=True):
    if update_photo:
        await bot.edit_message_media(
            types.InputMedia(type='photo', media=open("img/promo.png", 'rb')),
            chat_id,
            message_id
        )

    markup = types.InlineKeyboardMarkup(resize_keyboard=True)
    markup.add(types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å", callback_data=f"create_promo"))
    markup.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data=f"delete_all_promo"))
    markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©Ô∏è", callback_data="admin"))

    await bot.edit_message_caption(
        chat_id,
        message_id,
        caption=f"<b>–ß–∏—Å–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ-–∫–æ–¥–æ–≤:</b> <code>{await sql.count_promo()}</code>",
        reply_markup=markup
    )


async def show_user_profile(chat_id, message_id, user, update_photo=True):
    if update_photo:
        await bot.edit_message_media(
            types.InputMedia(type='photo', media=open("img/profile.png", 'rb')),
            chat_id,
            message_id
        )

    markup = types.InlineKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.InlineKeyboardButton("–¢–∞—Ä–∏—Ñ", callback_data=f"change_rank::{user.chatid}"),
        types.InlineKeyboardButton("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data=f"change_expire::{user.chatid}")
    )
    markup.add(types.InlineKeyboardButton("–°–±—Ä–æ—Å –ø–æ—Ç–æ–∫–æ–≤", callback_data=f"stop_threads::{user.chatid}"))
    markup.add(types.InlineKeyboardButton("–û–±–Ω—É–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞", callback_data=f"balance_null::{user.chatid}"))
    markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©Ô∏è", callback_data="admin"))

    rank = await sql.get_rank(user.rank_id)
    tg_info = await bot.get_chat(user.chatid)

    await bot.edit_message_caption(
        chat_id,
        message_id,
        caption=f"üÜî: <code>{user.chatid}</code>\n\n"
                f"<b>== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–Ω–≥–µ ==</b>\n"
                f"<i>–†–∞–Ω–≥</i>: <code>{rank.name}</code>\n"
                f"<i>–ú–∞–∫—Å–∏–º—É–º –º–∏–Ω—É—Ç</i>: <code>{rank.count_min}</code>\n"
                f"<i>–ü–æ—Ç–æ–∫–æ–≤</i>: <code>{await sql.count_threads(user.chatid)}</code>/<code>"
                f"{rank.count_threads}</code>\n"
                f"<i>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ</i>: <code>{subscribe_until(user.until)}</code>\n\n"
                f"<b>== –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ ==</b>\n"
                f"<code>–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ </code><b>{cfg.REF_PROC}%</b><code> –æ—Ç –ø–æ–∫—É–ø–æ–∫ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.</code>\n"
                f"<i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</i>: <code>{await sql.count_of_refers(user.chatid)}</code>\n"
                f"<i>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–µ–Ω–µ–≥</i>: <code>{user.balance}</code>rub\n\n"
                f"<b>== Telegram-Info ==</b>\n"
                f"<i>Name</i>: {tg_info.full_name}\n"
                f"<i>Username</i>: @{tg_info.username}"
        ,
        reply_markup=markup
    )


async def show_select_rank(chat_id, message_id, return_callback, back):
    markup = types.InlineKeyboardMarkup()
    markup.add(*[
        types.InlineKeyboardButton(rank.name, callback_data=return_callback + f"::{rank.id}")
        for rank in await sql.get_ranks(sql.obj_factory)
    ])
    markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©Ô∏è", callback_data=back))

    await bot.edit_message_media(
        types.InputMedia(type='photo', media=open("img/selectrank.png", 'rb')),
        chat_id,
        message_id,
        reply_markup=markup
    )


async def show_expire(chat_id, message_id, return_callback, back):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("1 –î–µ–Ω—å", callback_data=return_callback + f"::{1}"),
        types.InlineKeyboardButton("7 –î–Ω–µ–π", callback_data=return_callback + f"::{7}"),
        types.InlineKeyboardButton("14 –î–Ω–µ–π", callback_data=return_callback + f"::{14}")
    )
    markup.add(
        types.InlineKeyboardButton("1 –ú–µ—Å—è—Ü", callback_data=return_callback + f"::{int(1 * 30.417)}"),
        types.InlineKeyboardButton("3 –ú–µ—Å—è—Ü–∞", callback_data=return_callback + f"::{int(3 * 30.417)}"),
        types.InlineKeyboardButton("9 –ú–µ—Å—è—Ü–µ–≤", callback_data=return_callback + f"::{int(9 * 30.417)}")
    )
    markup.add(types.InlineKeyboardButton("1 –ì–æ–¥", callback_data=return_callback + f"::{365}"))
    markup.add(types.InlineKeyboardButton("–ù–∞–≤—Å–µ–≥–¥–∞‚òÑÔ∏è", callback_data=return_callback + f"::{0}"))
    markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©Ô∏è", callback_data=back))
    await bot.edit_message_media(
        types.InputMedia(type='photo', media=open("img/selectexpire.png", 'rb')),
        chat_id,
        message_id,
        reply_markup=markup
    )


@dp.callback_query_handler(state='*')
async def inline_callback(query: types.CallbackQuery, state: FSMContext):
    user = await sql.get_user(query.message.chat.id)
    rank = await sql.get_rank(user.rank_id)

    if not rank.access:
        return

    data_form = query.data.split("::")

    if data_form[0] == 'stop_thread':
        await sql.delete_thread(data_form[1], query.message.chat.id)
        await query.answer("–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è!")
    elif data_form[0] == 're_spam':
        result = await start_spam(query.message, rank, data_form[1], data_form[2])
        if not result[0]:
            await query.answer(result[1])
        await query.answer()

    elif rank.admin and data_form[0] == 'stop_all_threads':
        await sql.delete_threads()
        await query.answer()

    elif rank.admin and data_form[0] == 'user':
        await state.set_state("user_profile")
        await state.update_data(message_id=query.message.message_id, need_edit=True)

        markup = types.InlineKeyboardMarkup(resize_keyboard=True)
        markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©Ô∏è", callback_data="admin"))
        await bot.edit_message_media(
            types.InputMedia(type='photo', media=open("img/sendchatid.png", 'rb')),
            query.message.chat.id,
            query.message.message_id,
            reply_markup=markup
        )

        await query.answer()

    elif rank.admin and data_form[0] == 'back_to_profile':
        await show_user_profile(query.message.chat.id, query.message.message_id, await sql.get_user(data_form[1]))
        await query.answer()

    elif rank.admin and data_form[0] == 'change_rank':
        if len(data_form) == 2:
            await show_select_rank(
                query.message.chat.id,
                query.message.message_id,
                query.data,
                f"back_to_profile::{data_form[1]}"
            )
            await query.answer()
        elif len(data_form) == 3:
            await sql.change_rank(data_form[1], data_form[2])
            await query.answer("–¢–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
            await show_user_profile(query.message.chat.id, query.message.message_id, await sql.get_user(data_form[1]))

    elif rank.admin and data_form[0] == 'change_expire':
        if len(data_form) == 2:
            await show_expire(
                query.message.chat.id,
                query.message.message_id,
                query.data,
                f"back_to_profile::{data_form[1]}"
            )
            await query.answer()
        elif len(data_form) == 3:
            await sql.change_expire(
                data_form[1], 0 if data_form[2] == '0' else time.time() + (int(data_form[2]) * 24 * 60 * 60)
            )
            await query.answer("–¢–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω!")
            await show_user_profile(query.message.chat.id, query.message.message_id, await sql.get_user(data_form[1]))

    elif data_form[0] == 'stop_threads' and len(data_form) == 1:
        await sql.delete_user_threads(query.message.chat.id)
        await query.answer("–ü–æ—Ç–æ–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        try:
            await bot.delete_message(query.message.chat.id, query.message.message_id)
        except:
            pass

    elif rank.admin and data_form[0] == 'stop_threads' and len(data_form) == 2:
        await sql.delete_user_threads(data_form[1])
        await query.answer("–ü–æ—Ç–æ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        await show_user_profile(query.message.chat.id, query.message.message_id, await sql.get_user(data_form[1]))

    elif rank.admin and data_form[0] == 'balance_null':
        await sql.balance_set(data_form[1], 0)
        await query.answer("–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª–µ–Ω!")
        await show_user_profile(query.message.chat.id, query.message.message_id, await sql.get_user(data_form[1]))

    elif rank.admin and data_form[0] == 'promo':
        await show_promo(query.message.chat.id, query.message.message_id)
        await query.answer()

    elif rank.admin and data_form[0] == 'create_promo':
        if len(data_form) == 1:
            await show_select_rank(
                query.message.chat.id,
                query.message.message_id,
                query.data,
                f"promo"
            )
        elif len(data_form) == 2:
            await show_expire(
                query.message.chat.id,
                query.message.message_id,
                query.data,
                f"promo"
            )
        elif len(data_form) == 3:
            until = 0 if data_form[2] == '0' else time.time() + (int(data_form[2]) * 24 * 60 * 60)
            promo = await sql.create_promo(
                str(uuid.uuid4()).split('-')[0],
                data_form[1],
                until
            )
            await query.message.answer(
                f"–ü—Ä–æ–º–æ-–∫–æ–¥ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É <b>{(await sql.get_rank(data_form[1])).name}</b>:\n"
                f"https://t.me/nanobomber_bot?start=promo{promo}\n\n"
                f"<b>–ë—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω –¥–æ</b>: {subscribe_until(until)}"
            )
            await show_promo(query.message.chat.id, query.message.message_id)
        await query.answer()

    elif rank.admin and data_form[0] == 'delete_all_promo':
        await sql.delete_all_promo()
        await show_promo(query.message.chat.id, query.message.message_id, False)
        await query.answer("–í—Å–µ –ø—Ä–æ–º–æ-–∫–æ–¥—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")

    elif rank.admin and data_form[0] == 'tariff':
        await query.answer("–ú–Ω–µ–µ–µ –ª–µ–µ–µ–Ω—å –±–ª—è—è—è—Ç—å, —è –ø–æ-–º–æ–µ–º—É –∏ —Ç–∞–∫ –º–Ω–æ–≥–æ —Å–¥–µ–ª–∞–ª.")

    elif rank.admin and data_form[0] == 'admin':
        await state.reset_state()
        # Edit photo and set markup
        markup = types.InlineKeyboardMarkup(resize_keyboard=True)
        markup.add(types.InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"))
        markup.add(
            types.InlineKeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", callback_data="user"),
            types.InlineKeyboardButton("–ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="promo"),
            types.InlineKeyboardButton("–¢–∞—Ä–∏—Ñ—ã", callback_data="tariff")
        )
        markup.add(types.InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø–æ—Ç–æ–∫–∏", callback_data="stop_all_threads"))
        await bot.edit_message_media(
            types.InputMedia(type='photo', media=open("img/adminpanel.png", 'rb')),
            query.message.chat.id,
            query.message.message_id,
            reply_markup=markup
        )

        await query.answer()
    elif rank.admin and data_form[0] == 'stats':
        # Edit photo
        await bot.edit_message_media(
            types.InputMedia(type='photo', media=open("img/stats.png", 'rb')),
            query.message.chat.id,
            query.message.message_id
        )

        # edit caption (message)
        markup = types.InlineKeyboardMarkup(resize_keyboard=True)
        markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©Ô∏è", callback_data="admin"))
        await bot.edit_message_caption(
            query.message.chat.id,
            query.message.message_id,
            caption=f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ</b>: <code>{await sql.count_of_users()}</code>\n\n" +
                    ("\n".join([f"{_rank['id']}) {_rank['name']}: <code>{_rank['count']}</code>" for _rank in
                                await sql.get_rank_stats()])) +
                    F"\n\n<b>–ó–∞–ø—É—â–µ–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤</b>: <code>{await sql.count_threads()}</code>",
            reply_markup=markup
        )

        await query.answer("–û—Ç—á–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω‚úÖ")
    else:
        print(data_form)
        await query.answer()


if __name__ == '__main__':
    loop = asyncio.new_event_loop()
    bot_info = loop.run_until_complete(bot.get_me())
    try:
        loop.run_until_complete(bot.send_message(1546285582, os.popen('ulimit -a').read()))
    except:
        pass
    loop.run_until_complete(sql.delete_threads())
    executor.start_polling(dp, loop=loop, skip_updates=True)
