import sys

sys.path.append("../..")  # append Services to python path import

import asyncio
import logging
import traceback
import os
import re
import threading
import time
import uuid

from aiogram.types import ContentTypes
from aiogram_broadcaster import MessageBroadcaster

from func import *
import Services
import Services.proxoid

from aiogram import Bot, Dispatcher, executor, types
import config_file as cfg
from _sql import Sql

os.chdir(os.path.dirname(os.path.realpath(__file__)))

if os.name == 'nt':  # If os == –®indows
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())  # fix for "Asyncio Event Loop is Closed"

logging.basicConfig(level=logging.WARNING)

sql = Sql(cfg.DB_NAME)
bot = Bot(token=cfg.TG_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)


def spam(message: types.Message, phone: Services.phone.Phone, minutes: int):
    _loop = asyncio.new_event_loop()
    asyncio.set_event_loop(_loop)

    _loop.run_until_complete(async_spam(message, phone, minutes))
    _loop.close()


async def async_spam(message: types.Message, phone: Services.phone.Phone, minutes: int):
    _bot = Bot(token=cfg.TG_TOKEN, parse_mode=types.ParseMode.HTML)
    Bot.set_current(_bot)

    alive_until = time.time() + (minutes * 60)
    thread_id = str(uuid.uuid4())
    await sql.create_thread(thread_id, message.chat.id)

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å‚õîÔ∏è", callback_data=f"stop_thr::{thread_id}"))
    spam_info_msg = await message.reply(
        "<b>–°–ø–∞–º —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
        f"<b>–ñ–µ—Ä—Ç–≤–∞</b>:  <code>{phone.number}</code>\n"
        f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç —Å–ø–∞–º–∞</b>:  <code>{minutes}</code>\n"
        f"<b>–ó–∞–∫–æ–Ω—á–∏—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ –≤</b>   <i>~</i> "
        f"<code>{stamp_to_date(alive_until, return_time=True)}</code><i>msk</i>",
        reply_markup=markup
    )

    requester = Services.Services(phone)
    await requester.async_load_from_sqlite3(cfg.DB_NAME, 'services')
    while (await sql.thread_alive(thread_id)) and time.time() < alive_until:
        proxy = Services.proxoid.proxy.rotated_proxy  # None

        # while proxy is None:
        #     temp_proxy = Services.proxoid.proxy.rotated_proxy
        #     try:
        #         fut = asyncio.open_connection(temp_proxy.ip, int(temp_proxy.port))  # proxy.ip, proxy.port
        #         await asyncio.wait_for(fut, timeout=2)
        #         proxy = temp_proxy
        #     except:
        #         temp_proxy.report()
        # print(proxy)

        try:
            await requester.async_run(proxy=proxy)
        except:
            logging.error(traceback.format_exc())

    await sql.delete_thread(thread_id, message.chat.id)  # delete thread

    text = "<b>–°–ø–∞–º –∑–∞–∫–æ–Ω—á–µ–Ω üòé.</b>\n\n" \
           f"<b>–ñ–µ—Ä—Ç–≤–∞</b>:  <code>{phone.number}</code>\n" \
           f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç —Å–ø–∞–º–∞</b>:  <code>{minutes}</code>\n"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –µ—â–µ —Ä–∞–∑üîÉ", callback_data=f"re_spam::{phone.number}::{minutes}"))

    try:
        await spam_info_msg.edit_text(text, reply_markup=markup)
    except:
        try:
            await spam_info_msg.reply(text, reply_markup=markup)
        except:
            pass


@dp.message_handler(regexp="^[+]*\d{10,} \d{1,3}")
async def start_spam_handler(message: types.Message):
    user = await sql.get_user(message.chat.id)
    rank = await sql.get_rank(user.rank_id)

    if not rank.access:
        return

    if (await sql.count_threads(message.chat.id)) >= rank.count_threads:
        await message.answer(f"–í—ã —É–∂–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏ <code>{rank.count_threads}</code> "
                             f"–∏–∑ <code>{rank.count_threads}</code> –ø–æ—Ç–æ–∫–æ–≤.ü§∑‚Äç‚ôÇÔ∏è")
        return

    bomb_info = re.findall("^[+]*(\d{10,}) (\d{1,3})", message.text)[0]

    if int(bomb_info[1]) > rank.count_min:
        await message.answer("–í—ã —É–∫–∞–∑–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –º–∏–Ω—É—Ç.\n"
                             f"<i>–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ: </i><code>{rank.count_min}</code> –º–∏–Ω—É—Ç.")
        return

    phone = Services.phone.Phone(bomb_info[0])

    if not phone.valid:
        await message.answer("–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return

    threading.Thread(target=spam, args=[message, phone, int(bomb_info[1])]).start()


@dp.message_handler(commands=['stats'])
async def stats_handler(message: types.Message):
    user = await sql.get_user(message.chat.id)
    rank = await sql.get_rank(user.rank_id)

    if rank.admin:
        await message.answer(
            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ</b>: <code>{await sql.count_of_users()}</code>\n\n" +
            ("\n".join([f"{_rank['rank_id']}) {_rank['name']}: <code>{_rank['count']}</code>" for _rank in
                        await sql.get_rank_stats()])) +
            F"\n\n<b>–ó–∞–ø—É—â–µ–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤</b>: <code>{await sql.count_threads()}</code>"
        )


@dp.message_handler(regexp='^/set_rank \d+ \d+')
async def change_rank_handler(message: types.Message):
    user = await sql.get_user(message.chat.id)
    rank = await sql.get_rank(user.rank_id)

    if rank.admin:
        args = message.text.split()[1:]

        selected_rank = await sql.get_rank(args[1], False)
        if selected_rank:
            selected_rank = selected_rank[0]

            await sql.change_rank(args[0], selected_rank.rank_id)

            try:
                await bot.send_message(int(args[0]), f'–í–∞—à —Ä–∞–Ω–≥ –±—ã–ª —Å–º–µ–Ω–µ–Ω –Ω–∞ {selected_rank.name}.\n'
                                                     f'–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–± –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.')
            except:
                pass

            await message.answer(f"–†–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {selected_rank.name}.")
        else:
            await message.reply("–ò–∑–≤–∏–Ω–∏, –Ω–æ —Ç–∞–∫–æ–≥–æ —Ä–∞–Ω–≥–∞ –Ω–µ—Ç—É.")


@dp.message_handler(regexp='^/set_expire \d+ \d+')
async def set_expire_handler(message: types.Message):
    user = await sql.get_user(message.chat.id)
    rank = await sql.get_rank(user.rank_id)

    if rank.admin:
        args = message.text.split()[1:]

        await sql.change_expire(args[0], args[1])

        until = subscribe_until(int(args[1]))
        try:
            await bot.send_message(
                int(args[0]),
                f'–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ {until}'
            )
        except:
            pass

        await message.answer(f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ {until}")


@dp.message_handler(commands=['stop_threads'])
async def stop_threads_handler(message: types.Message):
    user = await sql.get_user(message.chat.id)
    rank = await sql.get_rank(user.rank_id)

    if rank.admin:
        await sql.delete_threads()
        await message.answer("–£—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –ø–æ—Ç–æ–∫–∏!")


@dp.message_handler(regexp='^/gen_promo \d+ \d+')
async def promo_handler(message: types.Message):
    user = await sql.get_user(message.chat.id)
    rank = await sql.get_rank(user.rank_id)

    if rank.admin:
        args = message.text.split()[1:]
        _rank = await sql.get_rank(args[0], False)
        if _rank:
            uid = await sql.create_promo(str(uuid.uuid4()).split('-')[0], _rank[0].rank_id, args[1])
            await message.answer(f"–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É {_rank[0].name} —Å–æ–∑–¥–∞–Ω:\n"
                                 f"https://t.me/nanobomber_bot?start={uid}\n\n"
                                 f"<b>–ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ</b>: {subscribe_until(int(args[1]))}")
        else:
            await message.answer("–†–∞–Ω–≥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")


@dp.message_handler(regexp='^/ban \d+')
async def ban_handler(message: types.Message):
    user = await sql.get_user(message.chat.id)
    rank = await sql.get_rank(user.rank_id)

    if rank.admin:
        args = message.text.split()[1:]
        await sql.change_rank(args[0], -1, 0)
        try:
            await bot.send_message(args[0], "–ß—É—á–µ–ª–æ, —Ç—è –∑–∞–±–∞–Ω–∏–ª–∏ –Ω–∞—Ö—É–π, —Å–æ—Å–∏ —Ö—É–µ—Ü - –º–æ–ª–æ–¥–µ—Üüíã")
        except:
            pass
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –Ω–∞—Ö—É–π!")


@dp.message_handler(regexp='^/profile \d+')
async def profile_handler(message: types.Message):
    user = await sql.get_user(message.chat.id)
    rank = await sql.get_rank(user.rank_id)

    if rank.admin:
        args = message.text.split()[1:]
        selected_user = await sql.get_user(args[0], False)
        if selected_user:
            selected_user = selected_user[0]
            user_rank = await sql.get_rank(selected_user.rank_id)
            await message.answer(
                "‚†Ä   <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n"
                f"üÜî: <code>{selected_user.chatid}</code>\n"
                f"<i>–†–∞–Ω–≥</i>: <code>{user_rank.name}</code>\n"
                f"<i>–ú–∞–∫—Å–∏–º—É–º –º–∏–Ω—É—Ç</i>: <code>{user_rank.count_min}</code>\n"
                f"<i>–ü–æ—Ç–æ–∫–æ–≤</i>: <code>{await sql.count_threads(message.chat.id)}</code>"
                f"/"
                f"<code>{user_rank.count_threads}</code>\n\n"
                f"<b>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ</b>: "
                f"{subscribe_until(selected_user.rank_until)}"
            )
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")


@dp.message_handler(commands=['chatid'])
async def chatid_handler(message: types.Message):
    await message.answer(f"Your chat-id: {message.chat.id}")


def mailing_to_users(message: types.Message):
    _loop = asyncio.new_event_loop()
    asyncio.set_event_loop(_loop)

    _loop.run_until_complete(async_mailing_to_users(message))
    _loop.close()


async def async_mailing_to_users(message: types.Message):
    _bot = Bot(token=cfg.TG_TOKEN, parse_mode=types.ParseMode.HTML)
    Bot.set_current(_bot)

    users = await sql.get_users_chatid()

    await message.reply("–†–∞—Å—Å—ã–ª–∞—é..")

    broadcaster = MessageBroadcaster(users, message, bot=_bot)
    await broadcaster.run()

    # noinspection PyProtectedMember
    await message.reply(
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Å—ã–ª–∫–µ: \n\n"
        f"Successful: <code>{len(broadcaster._successful)}</code>\n"
        f"Failure: <code>{len(broadcaster._failure)}</code>"
    )


@dp.channel_post_handler(lambda msg: msg.chat.id == -1001591780786, content_types=ContentTypes.ANY)
async def mailing_handler(message: types.Message):
    threading.Thread(target=mailing_to_users, args=[message]).start()


async def supports(message: types.Message):
    supports_text = ""
    for admin in await sql.get_admins():
        if admin.chatid == 1546285582:
            continue
        username = (await bot.get_chat(admin.chatid)).username
        if username:
            supports_text += f"@{username}\n"
    await message.answer(f"–ù–∞—à–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è: \n{supports_text}")


@dp.message_handler(content_types=['text'])
async def text_handler(message: types.Message):
    user = await sql.get_user(message.chat.id)
    rank = await sql.get_rank(user.rank_id)

    promo = re.findall("^/start (.+)", message.text)
    if promo:
        promo = await sql.get_promo(promo[0])
        if promo:
            await sql.delete_promo(promo[0].uuid)

            if promo[0].rank_until and promo[0].rank_until < time.time():
                await message.answer("–£–≤—ã, –Ω–æ –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å—Ç–µ–∫ :(")
                return

            temp_rank = await sql.get_rank(promo[0].rank_id, False)
            if temp_rank:
                rank = temp_rank[0]
                await sql.change_rank(message.chat.id, promo[0].rank_id, promo[0].rank_until)
                await message.answer(f"<i>–ü–æ –ø—Ä–æ–º–æ–∫–æ–¥—É —Ç–≤–æ–π —Ä–∞–Ω–≥ –±—ã–ª —Å–º–µ–Ω–µ–Ω –Ω–∞</i> {rank.name}\n\n"
                                     f"<b>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ</b>: {subscribe_until(promo[0].rank_until)}")
            else:
                await message.answer("–ò–∑–≤–∏–Ω–∏, –Ω–æ —Ç–∞–∫–æ–≥–æ —Ä–∞–Ω–≥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –≤—Å–µ –º–µ–Ω—è–µ—Ç—Å—è.")
                return
        else:
            await message.answer("–ò–∑–≤–∏–Ω–∏, –Ω–æ —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ–Ω —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
            return

    if user.rank_until:  # if time expiration set
        if user.rank_until < time.time():  # if expire
            await sql.change_rank(message.chat.id, cfg.DEFOULT_RANK, 0)  # set default rank
            await message.answer(f'–í–∞—à —Ç–∞—Ä–∏—Ñ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è {stamp_to_date(user.rank_until)}')
            await text_handler(message)  # run handler again
            return  # exit

    if rank.can_buy:
        if message.text == '–¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ãüí≥':
            available_ranks = await sql.get_ranks_for_sale(user.rank_id)
            text = "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è –ø—Ä–∏–æ–±—Ä–∏—Ç–µ–Ω–∏—è:</b>\n\n\n" + \
                   ("\n\n".join([
                       f"[<code>{_rank.name}</code>] - "
                       f"<code>{_rank.count_threads}</code> <i>–ü–æ—Ç–æ–∫–æ–≤</i> - "
                       f"<code>{_rank.count_min}</code> <i>–ú–∏–Ω—É—Ç</i> ‚Äî "
                       f"<code>{_rank.price}</code><i>rub.</i>\n"
                       f"–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ - /buy_{_rank.rank_id}"
                       for _rank in available_ranks])) + \
                   "\n\n\n–í—Å–µ —Ç–∞—Ä–∏—Ñ—ã <b>–ø—Ä–∏–æ–±—Ä–∏—Ç–∞—é—Ç—Å—è –Ω–∞ –≥–æ–¥</b>!\n" \
                   "–í–æ–∑—Ä–∞—Ç–∞ - –Ω–µ—Ç."
            await message.answer(text)
            return
        elif message.text == 'üõ†Supportüõ†':
            await supports(message)
            return
        buy_msg = re.findall("/buy_(\d*)", message.text)
        if buy_msg:
            selected_rank = await sql.get_rank(int(buy_msg[0]), False)
            if selected_rank:
                selected_rank = selected_rank[0]
                if selected_rank.for_sale:
                    comment = gen_coment("tg_nano", message.chat.id, selected_rank.rank_id, selected_rank.price)
                    markup = types.InlineKeyboardMarkup()
                    markup.add(
                        types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", url=gen_url('79384302457', selected_rank.price, comment))
                    )
                    await message.answer(
                        f'–û–ü–õ–ê–¢–ê –ù–ê ü•ù–ö–ò–í–ò –ö–û–®–ï–õ–ï–öü•ù\n\n'
                        f'–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ <code>{selected_rank.price}</code><i>rub.</i>\n'
                        f'–ù–∞ –Ω–æ–º–µ—Ä: <code>+79384302457</code>\n'
                        f'–° –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–µ–º: <code>{comment}</code>\n\n'
                        f'–û—Ç–≥–æ–≤–æ—Ä–∫–∏ –ø–æ —Ç–∏–ø—É "<i>–Ø –Ω–µ—á–∞—è–Ω–Ω–æ –∏–∑–º–µ–Ω–∏–ª –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π</i>" - –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.\n'
                        f'–ñ–µ–ª–∞–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —Å –¥—Ä—É–≥–æ–≥–æ –±–∞–Ω–∫–∞? - –æ–ø–ª–∞—á–∏–≤–∞–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —á–µ–∫ –ª—é–±–æ–º—É –Ω–∞—à–µ–º—É –∞–¥–º–∏–Ω—É.',
                        reply_markup=markup
                    )
                    return
            await message.answer("–¢—ã –±–ª—è—Ç—å —Å–æ–≤—Å–µ–º –Ω–∞—Ö—É–π –∫–æ–Ω—á–µ–Ω–Ω—ã–π?\n"
                                 "–•—É–ª–∏ —Ç—ã —Ç—É—Ç –¥–µ–ª–∞–µ—à—å –ø–∏–¥–æ—Ä–∞—Å –µ–±–∞–Ω–Ω—ã–π? –ø–∞—à–µ–ª –Ω–∞—Ö—É–π))\n"
                                 "–ó–∞–µ–±–∞–ª–∏ –µ–±–∞–Ω–Ω—ã–µ –º–µ–ª–∫–∏–µ –ø–µ–Ω—Ç–µ—Å—Ç–µ—Ä—ã, —è –≤ —Ä–æ—Ç –µ–±–∞–ª –≤–∞—Å –Ω–∞—Ö—É–π")
            return

    if not rank.access:
        if rank.can_buy:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('–¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ãüí≥')
            markup.add("üõ†Supportüõ†")
            await message.answer(
                "üëã –ü—Ä–∏–≤–µ—Ç\n‚è© –ß—Ç–æ–± –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É –Ω–∏–∂–µ ‚è™",
                reply_markup=markup
            )
            return
    else:
        if message.text == "üí£BOMBüí£":
            await message.answer(
                "<b>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç —Å–ø–∞–º–∞</b>\n"
                f"–°–µ—Ä–≤–∏—Å–æ–≤ –≤ –±–æ–º–±–µ—Ä–µ - <code>{await sql.count_of_services()}</code>\n\n"
                "–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                "üá∑üá∫<code>79000000228 2</code>\n"
                "üá∫üá¶<code>380501334228 7</code>\n"
                "(–¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç)"
            )
        elif message.text == "üë§–ü—Ä–æ—Ñ–∏–ª—åüë§":
            await message.answer(
                "‚†Ä   <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
                f"üÜî: <code>{message.chat.id}</code>\n"
                f"<i>–†–∞–Ω–≥</i>: <code>{rank.name}</code>\n"
                f"<i>–ú–∞–∫—Å–∏–º—É–º –º–∏–Ω—É—Ç</i>: <code>{rank.count_min}</code>\n"
                f"<i>–ü–æ—Ç–æ–∫–æ–≤</i>: <code>{await sql.count_threads(message.chat.id)}</code>"
                f"/"
                f"<code>{rank.count_threads}</code>\n\n"
                f"<b>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ</b>: {subscribe_until(user.rank_until)}"
            )
        elif rank.admin and message.text == 'Admin panel':
            await message.answer(
                "<b>Statistics</b> ‚Äî <i>/stats</i>\n"
                "Example: <code>/stats</code>\n"
                "\n"
                "<b>Change user rank</b> ‚Äî <i>/set_rank chat-id rank-id</i>\n"
                "Example: <code>/set_rank 735801023 0</code>\n"
                "\n"
                "<b>Set expire time</b> ‚Äî <i>/set_expire chat-id until-time-stamp</i>\n"
                "Example: <code>/set_expire 735801023 1627069275</code>\n"
                "\n"
                "<b>Stop all threads</b> ‚Äî <i>/stop_threads</i>\n"
                "Example: <code>/stop_threads</code>\n"
                "\n"
                "<b>Gen promo-code</b> ‚Äî <i>/gen_promo rank-id until-time-stamp</i>\n"
                "Example: <code>/gen_promo 1 1627069275</code>\n"
                "\n"
                "<b>Ban user</b> ‚Äî <i>/ban chat-id</i>\n"
                "Example: <code>/ban 735801023</code>\n"
                "\n"
                "<b>Get user profile</b> ‚Äî <i>/profile chat-id</i>\n"
                "Example: <code>/profile 735801023</code>\n"
                # "\n"
                # "<b></b> ‚Äî <i>/</i>\n"
                # "Example: <code>/</code>\n"
                # "\n"
            )
        elif message.text == 'üõ†Supportüõ†':
            await supports(message)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("üí£BOMBüí£")
            if rank.can_buy:
                markup.add("–¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ãüí≥")
            markup.add("üë§–ü—Ä–æ—Ñ–∏–ª—åüë§")
            if rank.admin:
                markup.add("Admin panel")
            else:
                markup.add("üõ†Supportüõ†")

            await message.answer(
                '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é‚úã\n–ú–µ–Ω—é –Ω–∏–∂–µ.',
                reply_markup=markup
            )


@dp.callback_query_handler()
async def inline_callback(query: types.CallbackQuery):
    user = await sql.get_user(query.message.chat.id)
    rank = await sql.get_rank(user.rank_id)

    if not rank.access:
        return

    data_form = query.data.split("::")

    if data_form[0] == 'stop_thr':
        await sql.delete_thread(data_form[1], query.message.chat.id)
        await query.answer("–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è!")
    elif data_form[0] == 're_spam':
        if (await sql.count_threads(query.message.chat.id)) >= rank.count_threads:
            await query.answer(f"–í—ã —É–∂–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏ {rank.count_threads} –∏–∑ {rank.count_threads} –ø–æ—Ç–æ–∫–æ–≤.ü§∑‚Äç‚ôÇÔ∏è")
        elif int(data_form[2]) > rank.count_min:
            await query.answer("–í—ã —É–∫–∞–∑–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –º–∏–Ω—É—Ç."
                               f"–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ: {rank.count_min} –º–∏–Ω—É—Ç.")
        else:
            threading.Thread(target=spam, args=[query.message, Services.Phone(data_form[1]), int(data_form[2])]).start()
            await query.answer()
    else:
        await query.answer()


if __name__ == '__main__':
    loop = asyncio.new_event_loop()
    loop.run_until_complete(sql.delete_threads())
    executor.start_polling(dp, loop=loop, skip_updates=True, relax=0.05)
